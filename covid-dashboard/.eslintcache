[{"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\index.js":"1","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\App\\index.js":"2","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\App\\App.js":"3","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\index.js":"4","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\index.js":"5","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\index.js":"6","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\InitialStateComponent\\index.js":"7","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\FooterComponent.js":"8","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderComponent.js":"9","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\MainComponent.js":"10","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\InitialStateComponent\\InitialStateComponent.js":"11","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\GitLinkComponent\\index.js":"12","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\LogoLinkComponent\\index.js":"13","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\CopyrightComponent\\index.js":"14","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderLogoComponent\\index.js":"15","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderTitleComponent\\index.js":"16","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\StatListComponent\\index.js":"17","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\index.js":"18","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\index.js":"19","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\MapComponent\\index.js":"20","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\ServiceComponent\\index.js":"21","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\GitLinkComponent\\GitLinkComponent.js":"22","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\LogoLinkComponent\\LogoLinkComponent.js":"23","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\CopyrightComponent\\CopyrightComponent.js":"24","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\StatListComponent\\StatListComponent.js":"25","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderTitleComponent\\HeaderTittleComponent.js":"26","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderLogoComponent\\HeaderLogoComponent.js":"27","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\LeftSideComponent.js":"28","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\RightSideComponent.js":"29","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\MapComponent\\MapComponent.js":"30","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\ServiceComponent\\ServiceComponent.js":"31","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\index.js":"32","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\index.js":"33","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\TableComponent\\index.js":"34","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\ChartComponent\\index.js":"35","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\ListComponent.js":"36","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\GlobalCasesComponent.js":"37","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\ChartComponent\\ChartComponent.js":"38","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\TableComponent\\TableComponent.js":"39","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\GlobalCasesStatComponent\\index.js":"40","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\GlobalCasesStatComponent\\GlobalCasesStatComponent.js":"41","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\SearchPanelComponent\\index.js":"42","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\SearchPanelComponent\\SearchPanelComponent.js":"43","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\FullScreenBtnComponent\\index.js":"44","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\FullScreenBtnComponent\\FullScreenBtnComponent.js":"45"},{"size":244,"mtime":1608737997336,"results":"46","hashOfConfig":"47"},{"size":49,"mtime":1607969415293,"results":"48","hashOfConfig":"47"},{"size":1826,"mtime":1608731127555,"results":"49","hashOfConfig":"47"},{"size":83,"mtime":1607968704145,"results":"50","hashOfConfig":"47"},{"size":77,"mtime":1607969308829,"results":"51","hashOfConfig":"47"},{"size":83,"mtime":1607969323863,"results":"52","hashOfConfig":"47"},{"size":133,"mtime":1608731127564,"results":"53","hashOfConfig":"47"},{"size":502,"mtime":1608115037634,"results":"54","hashOfConfig":"47"},{"size":627,"mtime":1608731257577,"results":"55","hashOfConfig":"47"},{"size":1411,"mtime":1608731127577,"results":"56","hashOfConfig":"47"},{"size":9149,"mtime":1608731127563,"results":"57","hashOfConfig":"47"},{"size":86,"mtime":1607971078102,"results":"58","hashOfConfig":"47"},{"size":89,"mtime":1607971134459,"results":"59","hashOfConfig":"47"},{"size":92,"mtime":1607971210670,"results":"60","hashOfConfig":"47"},{"size":95,"mtime":1607969722061,"results":"61","hashOfConfig":"47"},{"size":99,"mtime":1607969908785,"results":"62","hashOfConfig":"47"},{"size":91,"mtime":1608731127563,"results":"63","hashOfConfig":"47"},{"size":89,"mtime":1608118615401,"results":"64","hashOfConfig":"47"},{"size":92,"mtime":1608119035034,"results":"65","hashOfConfig":"47"},{"size":74,"mtime":1607976827852,"results":"66","hashOfConfig":"47"},{"size":78,"mtime":1608075921154,"results":"67","hashOfConfig":"47"},{"size":301,"mtime":1608115152853,"results":"68","hashOfConfig":"47"},{"size":3302,"mtime":1608115995715,"results":"69","hashOfConfig":"47"},{"size":267,"mtime":1608115590384,"results":"70","hashOfConfig":"47"},{"size":3823,"mtime":1608733606481,"results":"71","hashOfConfig":"47"},{"size":355,"mtime":1608120261584,"results":"72","hashOfConfig":"47"},{"size":368,"mtime":1608116335698,"results":"73","hashOfConfig":"47"},{"size":715,"mtime":1608731127571,"results":"74","hashOfConfig":"47"},{"size":951,"mtime":1608731127580,"results":"75","hashOfConfig":"47"},{"size":10245,"mtime":1608749027200,"results":"76","hashOfConfig":"47"},{"size":933,"mtime":1608731127581,"results":"77","hashOfConfig":"47"},{"size":98,"mtime":1607976940627,"results":"78","hashOfConfig":"47"},{"size":77,"mtime":1607976765100,"results":"79","hashOfConfig":"47"},{"size":80,"mtime":1607976709761,"results":"80","hashOfConfig":"47"},{"size":80,"mtime":1607976873301,"results":"81","hashOfConfig":"47"},{"size":4535,"mtime":1608737047879,"results":"82","hashOfConfig":"47"},{"size":375,"mtime":1608731127566,"results":"83","hashOfConfig":"47"},{"size":8937,"mtime":1608750880103,"results":"84","hashOfConfig":"47"},{"size":2157,"mtime":1608749830457,"results":"85","hashOfConfig":"47"},{"size":110,"mtime":1608731127570,"results":"86","hashOfConfig":"47"},{"size":1521,"mtime":1608731127569,"results":"87","hashOfConfig":"47"},{"size":100,"mtime":1608731127576,"results":"88","hashOfConfig":"47"},{"size":563,"mtime":1608731127575,"results":"89","hashOfConfig":"47"},{"size":106,"mtime":1608582142949,"results":"90","hashOfConfig":"47"},{"size":270,"mtime":1608750847213,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"whzjjn",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"170","usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\index.js",[],["192","193"],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\App\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\App\\App.js",["194"],"import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport HeaderComponent from '../HeaderComponent/index';\r\nimport MainComponent from '../MainComponent/index';\r\nimport FooterComponent from '../FooterComponent/index';\r\nimport { covidStatState } from '../InitialStateComponent/index';\r\n\r\nconst App = () => {\r\n    \r\n    const [state, setState] = useState(null);\r\n    const [countriesStat, setCountriesStat] = useState([]);\r\n    const [globalStat, setGlobalStat] = useState([]);\r\n    const [countryHistoryStat, setCountryHistoryStat] = useState([1,1]);\r\n    const [globalHistoryStat, setGlobalHistoryStat] = useState([]);\r\n    const [value, setValue] = useState('Total confirmed');\r\n    const [activeCountry, setActiveCountry] = useState(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        let isMounted = false;\r\n            covidStatState()\r\n                .then((res) => {\r\n                    if(!isMounted) {\r\n                        setState(res);\r\n                        setCountriesStat(res.countriesStat);\r\n                        setGlobalStat(res.globalStat);\r\n                        setGlobalHistoryStat(res.historyData)\r\n                    }\r\n                });\r\n            return () => {\r\n                isMounted = true\r\n            };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <HeaderComponent setValue={setValue}/>\r\n        <MainComponent \r\n            global={globalStat} \r\n            countries={countriesStat}\r\n            globalHistory={globalHistoryStat}\r\n            stat={value}\r\n            activeCountry={activeCountry}\r\n            setActiveCountry={setActiveCountry}\r\n            setCountryHistoryStat={setCountryHistoryStat}\r\n            countryHistoryStat={countryHistoryStat}\r\n        />\r\n        <FooterComponent />\r\n        </>\r\n    )  \r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\InitialStateComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\FooterComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\MainComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\InitialStateComponent\\InitialStateComponent.js",["195"],"import React from 'react';\r\nimport CovidService from '../ServiceComponent/index';\r\n\r\nexport const covidStatState = () => {\r\n\r\n  const service = new CovidService();\r\n\r\n  async function updateStatisctic() {\r\n    const state = {};\r\n    let covidData;\r\n    let globalStat;\r\n    let populationCount = 0;\r\n    let ind = 0;\r\n    await service\r\n      .getAllCases()\r\n      .then(({ Global, Countries }) => {\r\n        globalStat = Global;\r\n        covidData = Countries;\r\n      })\r\n      .then(async () => {\r\n        await service\r\n        .getAllCountriesPopulationAndFlags()\r\n        .then((countriesStat) => {\r\n          // merge two APIs & remove unnecessary API keys\r\n          covidData.forEach((elem) => {\r\n            countriesStat.forEach((item) => {\r\n              if (elem.CountryCode === item.alpha2Code) {\r\n                Object.assign(elem, item);\r\n                ['alpha2Code', 'name', 'Slug', 'Date', 'Premium'].forEach((i) => delete elem[i]);\r\n                // add new keys\r\n                elem.id = ind++;\r\n                elem['Total confirmed'] = elem.TotalConfirmed;\r\n                elem['Total recovered'] = elem.TotalRecovered;\r\n                elem['Total deaths'] = elem.TotalDeaths;\r\n                elem['New confirmed'] = elem.NewConfirmed;\r\n                elem['New recovered'] = elem.NewRecovered;\r\n                elem['New deaths'] = elem.NewDeaths;\r\n                elem['Global cases per 100 thousand'] = Math.ceil(elem.TotalConfirmed / (elem.population / 100000));\r\n                elem['Global recovered per 100 thousand'] = Math.ceil(elem.TotalRecovered / (elem.population / 100000));\r\n                elem['Global deaths per 100 thousand'] = Math.ceil(elem.TotalDeaths / (elem.population / 100000));\r\n                elem['New global cases per 100 thousand'] = Math.ceil(elem.NewConfirmed / (elem.population / 100000));\r\n                elem['New global recovered per 100 thousand'] = Math.ceil(elem.NewRecovered / (elem.population / 100000));\r\n                elem['New global deaths per 100 thousand'] = Math.ceil(elem.NewDeaths / (elem.population / 100000));\r\n                ['TotalConfirmed', 'TotalRecovered', 'TotalDeaths', 'NewConfirmed', 'NewRecovered', 'NewDeaths'].forEach((i) => delete elem[i]);\r\n                populationCount += item.population;\r\n              }\r\n            })\r\n          })\r\n          const globalCasesPer100Thousand = Math.ceil(globalStat.TotalConfirmed / (populationCount / 100000));\r\n          const globalRecoveredPer100Thousand = Math.ceil(globalStat.TotalRecovered / (populationCount / 100000));\r\n          const globalDeathsPer100Thousand = Math.ceil(globalStat.TotalDeaths / (populationCount / 100000));\r\n          const newGlobalCasesPer100Thousand = Math.ceil(globalStat.NewConfirmed / (populationCount / 100000));\r\n          const newGlobalRecoveredPer100Thousand = Math.ceil(globalStat.NewRecovered / (populationCount / 100000));\r\n          const newGlobalDeathsPer100Thousand = Math.ceil(globalStat.NewDeaths / (populationCount / 100000));\r\n          const globalCovidData = {\r\n            'Total confirmed': globalStat.TotalConfirmed,\r\n            'Total recovered': globalStat.TotalRecovered,\r\n            'Total deaths': globalStat.TotalDeaths,\r\n            'New confirmed': globalStat.NewConfirmed,\r\n            'New recovered': globalStat.NewRecovered,\r\n            'New deaths': globalStat.NewDeaths,\r\n            'Global cases per 100 thousand': globalCasesPer100Thousand,\r\n            'Global recovered per 100 thousand': globalRecoveredPer100Thousand,\r\n            'Global deaths per 100 thousand': globalDeathsPer100Thousand,\r\n            'New global cases per 100 thousand': newGlobalCasesPer100Thousand,\r\n            'New global recovered per 100 thousand': newGlobalRecoveredPer100Thousand,\r\n            'New global deaths per 100 thousand': newGlobalDeathsPer100Thousand,\r\n          }\r\n          state.countriesStat = covidData;\r\n          state.globalStat = globalCovidData;\r\n        }).then(async () => {\r\n          await service\r\n          .getHistoryGlobalCases()\r\n          .then((historyStat) => {\r\n            const historyData = historyStat.map((elem, i) => {\r\n              let newConfirmed = 0;\r\n              let newRecovered = 0;\r\n              let newDeaths = 0;\r\n              if (historyStat[i + 1]) {\r\n                newConfirmed = elem.total_cases - historyStat[i + 1].total_cases;\r\n                if (newConfirmed < 0) newConfirmed = 0;\r\n                newRecovered = elem.total_recovered - historyStat[i + 1].total_recovered;\r\n                if (newRecovered < 0) newRecovered = 0;\r\n                newDeaths = elem.total_deaths - historyStat[i + 1].total_deaths;\r\n                if (newDeaths < 0) newDeaths = 0;\r\n              }\r\n              const totalConfirmedPer100Thousand = Math.ceil(elem.total_cases / (populationCount / 100000));\r\n              const totalRecoveredPer100Thousand = Math.ceil(elem.total_recovered / (populationCount / 100000));\r\n              const totalDeathsPer100Thousand = Math.ceil(elem.total_deaths / (populationCount / 100000));\r\n              const newConfirmedPer100Thousand = Math.ceil(newConfirmed / (populationCount / 100000));\r\n              const newRecoveredPer100Thousand = Math.ceil(newRecovered / (populationCount / 100000));\r\n              const newDeathsPer100Thousand = Math.ceil(newDeaths / (populationCount / 100000));\r\n              return {\r\n                date: elem.last_update,\r\n                'Total confirmed': elem.total_cases,\r\n                'Total recovered': elem.total_recovered,\r\n                'Total deaths': elem.total_deaths,\r\n                'New confirmed': newConfirmed,\r\n                'New recovered': newRecovered,\r\n                'New deaths': newDeaths,\r\n                'Global cases per 100 thousand': totalConfirmedPer100Thousand,\r\n                'Global recovered per 100 thousand': totalRecoveredPer100Thousand,\r\n                'Global deaths per 100 thousand': totalDeathsPer100Thousand,\r\n                'New global cases per 100 thousand': newConfirmedPer100Thousand,\r\n                'New global recovered per 100 thousand': newRecoveredPer100Thousand,\r\n                'New global deaths per 100 thousand': newDeathsPer100Thousand,\r\n              }\r\n            })\r\n            state.historyData = historyData.reverse();\r\n          })\r\n        });\r\n    })\r\n    return state;\r\n  }\r\n  return updateStatisctic();\r\n}\r\n\r\nexport async function getHistoryStatCountry(selectedCountyCode, countries) {\r\n  // console.log('countries', countries);\r\n  let population;\r\n  countries.forEach((item) => {\r\n    if (item.CountryCode === selectedCountyCode) {\r\n      population = item.population;\r\n    }\r\n  });\r\n  const service = new CovidService();\r\n  let historyData;\r\n  await service\r\n      .getHistoryCountryCases(selectedCountyCode)\r\n        .then((response) => {\r\n          historyData = response.map((elem, i) => {\r\n            let newConfirmed = 0;\r\n            let newRecovered = 0;\r\n            let newDeaths = 0;\r\n            if (response[i + 1]) {\r\n              newConfirmed = response[i + 1].Confirmed - elem.Confirmed;\r\n              if (newConfirmed < 0) newConfirmed = 0;\r\n              newRecovered = response[i + 1].Recovered - elem.Recovered;\r\n              if (newRecovered < 0) newRecovered = 0;\r\n              newDeaths = response[i + 1].Deaths - elem.Deaths;\r\n              if (newDeaths < 0) newDeaths = 0;\r\n            }\r\n\r\n \r\n            // console.log(selectedCountyCode, population);\r\n            // const population = 7594000000;\r\n            \r\n            const totalConfirmedPer100Thousand = Math.ceil(elem.Confirmed / (population / 100000));\r\n            const totalRecoveredPer100Thousand = Math.ceil(elem.Recovered / (population / 100000));\r\n            const totalDeathsPer100Thousand = Math.ceil(elem.Deaths / (population / 100000));\r\n            const newConfirmedPer100Thousand = Math.ceil(newConfirmed / (population / 100000));\r\n            const newRecoveredPer100Thousand = Math.ceil(newRecovered / (population / 100000));\r\n            const newDeathsPer100Thousand = Math.ceil(newDeaths / (population / 100000));\r\n            return {\r\n              date: elem.Date,\r\n              'Total confirmed': elem.Confirmed,\r\n              'Total recovered': elem.Recovered,\r\n              'Total deaths': elem.Deaths,\r\n              'New confirmed': newConfirmed,\r\n              'New recovered': newRecovered,\r\n              'New deaths': newDeaths,\r\n              'Global cases per 100 thousand': totalConfirmedPer100Thousand,\r\n              'Global recovered per 100 thousand': totalRecoveredPer100Thousand,\r\n              'Global deaths per 100 thousand': totalDeathsPer100Thousand,\r\n              'New global cases per 100 thousand': newConfirmedPer100Thousand,\r\n              'New global recovered per 100 thousand': newRecoveredPer100Thousand,\r\n              'New global deaths per 100 thousand': newDeathsPer100Thousand,\r\n            }\r\n          })\r\n          \r\n          \r\n        })\r\n        // console.log('inside func, out',historyData);\r\n        return historyData;\r\n}\r\n// export default covidStatState;\r\n","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\GitLinkComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\LogoLinkComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\CopyrightComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderLogoComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderTitleComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\StatListComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\MapComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\ServiceComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\GitLinkComponent\\GitLinkComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\LogoLinkComponent\\LogoLinkComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\FooterComponent\\CopyrightComponent\\CopyrightComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\StatListComponent\\StatListComponent.js",["196"],"import React from 'react';\r\nimport './StatListComponent.css';\r\n\r\nconst StatListComponent = ({setValue}) => {\r\n\r\n    function setItemChecked() {\r\n        const inputs = document.querySelectorAll('.stat');\r\n        let selectedInputIndex;\r\n        inputs.forEach((input) => {\r\n            if (input.checked === true) {\r\n                selectedInputIndex = input.value;\r\n            }\r\n        });\r\n        setValue(selectedInputIndex);\r\n    };\r\n\r\n    return (\r\n        <div className=\"header-form-wrapper\">\r\n            <form action=\"#\" className=\"header-form-btns-wrapper\">\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"Total confirmed\"  defaultChecked={true} onChange={setItemChecked}></input>\r\n                    <span>Total Confirmed</span>\r\n                    </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"Total recovered\"  onChange={setItemChecked}></input>\r\n                    <span>Total Recovered</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"Total deaths\" onChange={setItemChecked}></input>\r\n                    <span>Total Deaths</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"New confirmed\" onChange={setItemChecked}></input>\r\n                    <span>New Confirmed</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"New recovered\" onChange={setItemChecked}></input>\r\n                    <span>New Recovered</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"NewDeaths\" onChange={setItemChecked}></input>\r\n                    <span>New Deaths</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"Global cases per 100 thousand\" onChange={setItemChecked}></input>\r\n                    <span>Total Cases per 100,000</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"Global recovered per 100 thousand\" onChange={setItemChecked}></input>\r\n                    <span>Total Recovered per 100,000</span>\r\n                </div>\r\n                <div className=\"stat\" className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"TotalDeathesPer100Thousand\" onChange={setItemChecked}></input>\r\n                    <span>Total Deaths per 100,000</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"NewCasesPer100Thousand\" onChange={setItemChecked}></input>\r\n                    <span>New Cases per 100,000</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"New global recovered per 100 thousand\" onChange={setItemChecked}></input>\r\n                    <span>New Recovered per 100,000</span>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <input className=\"stat\" name=\"stat\" type=\"radio\" value=\"New global deaths per 100 thousand\" onChange={setItemChecked}></input>\r\n                    <span>New Deaths per 100,000</span>\r\n                </div>\r\n            </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatListComponent;\r\n","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderTitleComponent\\HeaderTittleComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\HeaderComponent\\HeaderLogoComponent\\HeaderLogoComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\LeftSideComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\RightSideComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\MapComponent\\MapComponent.js",["197","198","199","200","201","202"],"import React, { useRef, useLayoutEffect, useState } from 'react';\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport { getHistoryStatCountry } from '../../InitialStateComponent/index';\r\nimport './MapComponent.css';\r\nimport FullScreenBtnComponent from '../LeftSideComponent/ListComponent/FullScreenBtnComponent/index';\r\n\r\nfunction MapComponent({ countries, stat, setCountryHistoryStat, setActiveCountry, activeCountry }) {\r\n  let mapData = [];\r\n  var currentCountry = \"World\";\r\n  var currentPolygon;\r\n\r\n  countries.forEach((country) => {\r\n    mapData.push({\r\n      id: country.CountryCode,\r\n      name: `${country.Country}\\n ${stat}`,\r\n      value: country[stat],\r\n    });\r\n  })\r\n  //test\r\n  \r\n  const map = useRef(null);\r\n\r\n  useLayoutEffect(() => {\r\n    let x = am4core.create(\"mapdiv\", am4maps.MapChart);\r\n\r\n    // let title = x.titles.create();\r\n    // title.text = \"[bold font-size: 20]Population of the World in 2011[/]\\nsource: Gapminder\";\r\n    // title.textAlign = \"middle\";\r\n\r\n// Set map definition\r\nx.geodata = am4geodata_worldLow;\r\n\r\n// Set projection\r\nx.projection = new am4maps.projections.Miller();\r\n\r\nx.background.fill = 'rgb(20,30,50)';\r\nx.background.fillOpacity = 1;\r\n\r\n// Create map polygon series\r\nvar polygonSeries = x.series.push(new am4maps.MapPolygonSeries());\r\npolygonSeries.exclude = [\"AQ\"];\r\npolygonSeries.useGeodata = true;\r\npolygonSeries.nonScalingStroke = true;\r\npolygonSeries.strokeWidth = 0.5;\r\npolygonSeries.calculateVisualCenter = true;\r\n\r\n// x.imageTemplate.data = mapData;\r\nvar imageSeries = x.series.push(new am4maps.MapImageSeries());\r\nimageSeries.data = mapData;\r\n\r\nimageSeries.dataFields.value = \"value\";\r\n\r\nvar imageTemplate = imageSeries.mapImages.template;\r\nimageTemplate.nonScaling = true;\r\n\r\nvar circle = imageTemplate.createChild(am4core.Circle);\r\n\r\ncircle.fillOpacity = 0.7;\r\ncircle.fill = 'rgba(255,0,0,0.6)';\r\ncircle.tooltipText = \"{name}: [bold]{value}[/]\";\r\n\r\n\r\n  var polygonTemplate = polygonSeries.mapPolygons.template;\r\n  polygonTemplate.fill = 'rgb(60,60,60)';\r\n  polygonTemplate.fillOpacity = 1\r\n  polygonTemplate.stroke = \"black\";\r\n  polygonTemplate.strokeOpacity = 0.15;\r\n  polygonTemplate.setStateOnChildren = true;\r\n  polygonTemplate.tooltipPosition = \"fixed\";\r\n\r\n  \r\n  polygonTemplate.events.on(\"hit\", handleCountryHit);\r\n  polygonTemplate.events.on(\"over\", handleCountryOver);\r\n  polygonTemplate.events.on(\"out\", handleCountryOut);\r\n  // polygon states\r\n  var polygonHoverState = polygonTemplate.states.create(\"hover\");\r\n  polygonHoverState.transitionDuration = 0;\r\n  polygonHoverState.properties.fill = 'rgb(40,40,40)';\r\n  // var polygonActiveState = polygonTemplate.states.create(\"active\")\r\n  // polygonActiveState.properties.fill = 'green';\r\n\r\n  \r\n    // circle.events.on(\"hit\", test);\r\n    // async function test(e) {\r\n    //   console.log(e.target.dataItem.dataContext.id);\r\n    //   await showData(e.target.dataItem.dataContext.id)\r\n    // }\r\n\r\n\r\nimageSeries.heatRules.push({\r\n  \"target\": circle,\r\n  \"property\": \"radius\",\r\n  \"min\": 4,\r\n  \"max\": 30,\r\n  \"dataField\": \"value\"\r\n});\r\n// console.log(imageSeries)\r\nx.legend = new am4maps.Legend();\r\nx.legend.background.fillOpacity = 0;\r\nx.legend.labels.template.fill = 'rgba(255,0,0,0.6)';\r\n// x.legend.labels.cornerRadius = 80;\r\n// x.legend.width = 120;\r\nx.legend.useDefaultMarker = true;\r\nvar marker = x.legend.markers.template.children.getIndex(0);\r\nmarker.cornerRadius(12, 12, 12, 12);\r\n// marker.strokeWidth = 2;\r\n// marker.strokeOpacity = 1;\r\n// marker.stroke = am4core.color(\"#ccc\");\r\nx.legend.align = \"left\";\r\nx.legend.padding(10, 15, 10, 15);\r\nx.legend.data = [{\r\n    name: stat, \r\n}];\r\nx.legend.itemContainers.template.clickable = false;\r\nx.legend.itemContainers.template.focusable = false;\r\n\r\n  // MAP CHART zoomControl\r\n  x.zoomControl = new am4maps.ZoomControl();\r\n  x.zoomControl.align = \"right\";\r\n  x.zoomControl.marginRight = 15;\r\n  x.zoomControl.valign = \"middle\";\r\n  x.zoomControl.opacity = 0.5;\r\n  x.zoomControl.minusButton.events.on(\"hit\", showWorld);\r\n\r\nimageTemplate.adapter.add(\"latitude\", function(latitude, target) {\r\n  var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\r\n  if(polygon){\r\n    return polygon.visualLatitude;\r\n   }\r\n   return latitude;\r\n})\r\n\r\nimageTemplate.adapter.add(\"longitude\", function(longitude, target) {\r\n  var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\r\n  if(polygon){\r\n    return polygon.visualLongitude;\r\n   }\r\n   return longitude;\r\n})\r\n    map.current = x;\r\n\r\n    // !console.log(x.series)\r\n    if (polygonSeries.mapPolygons.values[1]) {\r\n      polygonSeries.mapPolygons.values[1].isActive = true;\r\n      selectCountry(polygonSeries.mapPolygons.values[1])\r\n    }\r\n    \r\n    // polygonSeries.mapPolygons.isActive = true;\r\n    // polygonSeries.mapPolygons.isHover = true;\r\n    // x.zoomToMapObject(polygonSeries.mapPolygons.values[1], getZoomLevel(polygonSeries.mapPolygons.values[1]))\r\n  // select a country\r\n  function selectCountry(mapPolygon) {\r\n    // console.log('mapPolygon', mapPolygon)\r\n    resetHover();\r\n    polygonSeries.hideTooltip();\r\n\r\n    // if the same country is clicked show world\r\n    if (currentPolygon == mapPolygon) {\r\n      currentPolygon.isActive = false;\r\n      currentPolygon = undefined;\r\n      showWorld();\r\n      return;\r\n    }\r\n    // save current polygon\r\n    currentPolygon = mapPolygon;\r\n    // var countryIndex = countryIndexMap[mapPolygon.dataItem.id];\r\n    currentCountry = mapPolygon.dataItem.dataContext.name;\r\n    // console.log('target', mapPolygon.dataItem.dataContext.id)\r\n    showData(mapPolygon.dataItem.dataContext.id)\r\n    // make others inactive\r\n    polygonSeries.mapPolygons.each(function(polygon) {\r\n      polygon.isActive = false;\r\n    })\r\n\r\n    mapPolygon.isActive = true;\r\n\r\n    // zoom to country\r\n    x.zoomToMapObject(mapPolygon, getZoomLevel(mapPolygon));\r\n  }\r\n\r\n  async function showData(selectedCountyCode) {\r\n    setActiveCountry(selectedCountyCode);\r\n\r\n    const historyData =  await getHistoryStatCountry(selectedCountyCode, countries)\r\n    // console.log('historyData', historyData)\r\n    setCountryHistoryStat(historyData);\r\n\r\n    function changeHighlightSelectedCountry(activeCountry) {\r\n      if (document.querySelector('.active-country')) {\r\n        document.querySelector('.active-country').classList.toggle('active-country');\r\n      }\r\n      if (document.querySelector(`.cases-wrapper[data-selected-country='${activeCountry}']`)) {\r\n        document.querySelector(`.cases-wrapper[data-selected-country='${activeCountry}']`).classList.toggle('active-country');\r\n      }\r\n    }\r\n\r\n    changeHighlightSelectedCountry(selectedCountyCode);\r\n  }\r\n\r\n\r\n  // show world data\r\n  function showWorld() {\r\n    currentCountry = \"World\";\r\n    // console.log('target', 'world')\r\n    currentPolygon = undefined;\r\n    resetHover();\r\n\r\n    // make all inactive\r\n    polygonSeries.mapPolygons.each(function(polygon) {\r\n      polygon.isActive = false;\r\n    })\r\n\r\n    x.goHome();\r\n  }\r\n\r\n  function resetHover() {\r\n    polygonSeries.mapPolygons.each(function(polygon) {\r\n      polygon.isHover = false;\r\n    })\r\n\r\n    \r\n    // bubbleSeries\r\n    imageSeries.mapImages.each(function(image) {\r\n      image.isHover = false;\r\n    })\r\n  }\r\n\r\n    // calculate zoom level (default is too close)\r\n    function getZoomLevel(mapPolygon) {\r\n      var w = mapPolygon.polygon.bbox.width;\r\n      var h = mapPolygon.polygon.bbox.width;\r\n      // change 2 to smaller walue for a more close zoom\r\n      return Math.min(x.seriesWidth / (w * 2), x.seriesHeight / (h * 2))\r\n    }\r\n\r\n    function handleCountryHit(event) {\r\n      selectCountry(event.target);\r\n\r\n    }\r\n\r\n    function handleCountryOut(event) {\r\n      rollOutCountry(event.target);\r\n    }\r\n\r\n    function handleImageOver(event) {\r\n      rollOverCountry(polygonSeries.getPolygonById(event.target.dataItem.id));\r\n    }\r\n\r\n    function handleCountryOver(event) {\r\n      rollOverCountry(event.target);\r\n    }\r\n\r\n      // what happens when a country is rolled-out\r\n  function rollOutCountry(mapPolygon) {\r\n    var image = imageSeries.getImageById(mapPolygon.dataItem.id)\r\n\r\n    resetHover();\r\n    if (image) {\r\n      image.isHover = false;\r\n    }\r\n  }\r\n\r\n    // what happens when a country is rolled-over\r\n    function rollOverCountry(mapPolygon) {\r\n\r\n      resetHover();\r\n      if (mapPolygon) {\r\n        mapPolygon.isHover = true;\r\n  \r\n        // make bubble hovered too\r\n        var image = imageSeries.getImageById(mapPolygon.dataItem.id);\r\n        if (image) {\r\n          image.dataItem.dataContext.name = mapPolygon.dataItem.dataContext.name;\r\n          image.isHover = true;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    return () => {\r\n      x.dispose();\r\n    };\r\n  }, []);\r\n  \r\n  // When the --- prop changes it will update the map\r\n  useLayoutEffect(() => {\r\n    map.current.series.values[1].data = mapData;\r\n    map.current.legend.data = [{\r\n      name: stat, \r\n      fill: 'rgba(255,0,0,0.6)'\r\n  }];\r\n  }, [mapData]);\r\n\r\n  // useLayoutEffect(() => {\r\n  //   target.current.series.values[1].data = selectCountry;\r\n  // }, [selectCountry]);\r\n  const [fullScreen, setfullScreen] = useState(false);\r\n  function onFullScreen () {\r\n    setfullScreen(!fullScreen);\r\n    const body = document.getElementsByTagName('body');\r\n    if(body[0].style.overflow === \"hidden\") {\r\n      body[0].style.overflow = \"auto\";\r\n    } else {\r\n      body[0].style.overflow = \"hidden\";\r\n    } \r\n  };\r\n  const zIndex = 'zIndex';\r\n  const background = 'backgroundColor';\r\n  const style = {\r\n    position: fullScreen ? \"absolute\" : \"relative\",\r\n    top: fullScreen ? \"0\" : \"0\",\r\n    bottom: fullScreen ? \"0\" : \"0\",\r\n    right: fullScreen ? \"0\" : \"0\",\r\n    left: fullScreen ? \"0\" : \"0\",\r\n    width: fullScreen ? \"100%\" : \"49%\",\r\n    height: fullScreen ? \"100vh\" : \"73vh\",\r\n    [background]: fullScreen ? \"black\" : \"#222222\",\r\n    [zIndex]: fullScreen ? \"1000\" : \"0\",\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"map-component-wrapper\"  style={style} >\r\n      <div id=\"mapdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\r\n      <FullScreenBtnComponent  onFullScreen={onFullScreen}/>\r\n    </div>\r\n   \r\n  );\r\n}\r\nexport default MapComponent;","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\ServiceComponent\\ServiceComponent.js",["203"],"import React from 'react';\r\n\r\nexport default class CovidService {\r\n\r\n    async getResource(url) {\r\n      const response = await fetch(url);\r\n    \r\n      if(!response.ok) {\r\n        throw new Error(`Could not fetch ${url}` +\r\n        ` , received ${response.status}`);\r\n      };\r\n    \r\n      const body = await response.json();\r\n      return body;\r\n    };\r\n  \r\n    getAllCases() {\r\n      return this.getResource(`https://api.covid19api.com/summary`);\r\n    };\r\n  \r\n    async getAllCountriesPopulationAndFlags() {\r\n      const response = await this.getResource(`https://restcountries.eu/rest/v2/all?fields=name;population;flag;alpha2Code`);\r\n\r\n      return response;\r\n    };\r\n\r\n    getHistoryCountryCases(countryCode) {\r\n      return this.getResource(`https://api.covid19api.com/total/country/${countryCode}`);\r\n    };\r\n\r\n    getHistoryGlobalCases() {\r\n      return this.getResource(`https://covid19-api.org/api/timeline`);\r\n    };\r\n}\r\n","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\TableComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\ChartComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\ListComponent.js",["204","205"],"import React, { useState } from 'react';\r\nimport './ListComponent.css';\r\nimport SearchPanelComponent from './SearchPanelComponent/index';\r\nimport { getHistoryStatCountry } from '../../../InitialStateComponent/index';\r\nimport FullScreenBtnComponent from './FullScreenBtnComponent/index'\r\n\r\nconst ListComponent = ({countries, stat, activeCountry, setActiveCountry, setCountryHistoryStat}) => {\r\n  const [temp, setTemp] = useState('');\r\n  \r\n  function onSearch(temp) {\r\n    setTemp(temp);\r\n  }\r\n\r\n  const [fullScreen, setfullScreen] = useState(false);\r\n\r\n  async function setCountry(e) {\r\n    const selectedCountyCode = e.target.closest('.cases-wrapper').dataset.selectedCountry\r\n    setActiveCountry(selectedCountyCode);\r\n\r\n    // console.log(selectedCountyCode)\r\n    const historyData =  await getHistoryStatCountry(selectedCountyCode, countries)\r\n      // console.log('historyData', historyData)\r\n    setCountryHistoryStat(historyData);\r\n    // const historyData = getHistoryStatCountry(selectedCountyCode)\r\n    // setCountryHistoryStat(historyData);\r\n  };\r\n  \r\n\r\n  function changeHighlightSelectedCountry(activeCountry) {\r\n    if (document.querySelector('.active-country')) {\r\n      document.querySelector('.active-country').classList.toggle('active-country');\r\n    }\r\n    if (document.querySelector(`.cases-wrapper[data-selected-country='${activeCountry}']`)) {\r\n      document.querySelector(`.cases-wrapper[data-selected-country='${activeCountry}']`).classList.toggle('active-country');\r\n    }\r\n  }\r\n\r\n  changeHighlightSelectedCountry(activeCountry); \r\n  // console.log(activeCountry);\r\n\r\n  const visibleItems = (function search(countries, temp) {\r\n    if (temp.length === 0) {\r\n      return countries;\r\n  };\r\n\r\n  return countries.filter((country) => {\r\n      return country.Country.\r\n      toLowerCase()\r\n      .indexOf(temp.toLowerCase()) > -1;\r\n    });\r\n  })(countries, temp);\r\n  \r\n  const countriesList = visibleItems.map((item) => {\r\n    const state = {\r\n        id: item.id,\r\n        countryName: item.Country,\r\n        ...item\r\n    };\r\n\r\n    let prop;\r\n    if (stat === 0) {\r\n      prop = item.TotalConfirmed;\r\n    } else if (stat === 1) {\r\n      prop = item.TotalRecovered;\r\n    } else if (stat === 2) {\r\n      prop = item.TotalDeaths;\r\n    } else if (stat === 3) {\r\n      prop = item.NewConfirmed;\r\n    } else if (stat === 4) {\r\n      prop = item.NewRecovered;\r\n    } else if (stat === 5) {\r\n      prop = item.NewDeaths;\r\n    } else if (stat === 6) {\r\n      prop = item.GlobalCasesPer100Thousand;\r\n    } else if (stat === 7) {\r\n      prop = item.GlobalRecoveredPer100Thousand;\r\n    } else if (stat === 8) {\r\n      prop = item.GlobalDeathesPer100Thousand;\r\n    } else if (stat === 9) {\r\n      prop = item.NewGlobalCasesPer100Thousand;\r\n    } else if (stat === 10) {\r\n      prop = item.NewGlobalRecoveredPer100Thousand;\r\n    } else if (stat === 11) {\r\n      prop = item.NewGlobalDeathsPer100Thousand;\r\n    };\r\n  \r\n    return (\r\n      <li key={state.id} data-selected-country={state.CountryCode} onClick={setCountry} className=\"cases-wrapper\">\r\n        <span className=\"country-stat-wrapper\">{item[stat]}</span>\r\n        <span className=\"country-wrapper\">{state.countryName}</span>\r\n        <div className=\"country-flag-wrapper\"><img src={state.flag} alt=\"flag\" className=\"country-flag\"></img></div>\r\n      </li>\r\n    );\r\n  });\r\n  \r\n  countriesList.sort((a, b) => {\r\n    return b.props.children[0].props.children - a.props.children[0].props.children; \r\n  });\r\n\r\n  const zIndex = 'zIndex';\r\n  const background = 'backgroundColor';\r\n  const style = {\r\n    position: fullScreen ? \"absolute\" : \"relative\",\r\n    top: fullScreen ? \"0\" : \"0\",\r\n    bottom: fullScreen ? \"0\" : \"0\",\r\n    width: fullScreen ? \"100%\" : \"100%\",\r\n    height: fullScreen ? \"120%\" : \"79%\",\r\n    [background]: fullScreen ? \"black\" : \"#222222\",\r\n    [zIndex]: fullScreen ? \"1000\" : \"0\",\r\n  };\r\n\r\n  function onFullScreen () {\r\n    setfullScreen(!fullScreen);\r\n    const body = document.getElementsByTagName('body');\r\n    if(body[0].style.overflow === \"hidden\") {\r\n      body[0].style.overflow = \"auto\";\r\n    } else {\r\n      body[0].style.overflow = \"hidden\";\r\n    } \r\n  };\r\n\r\n  return (\r\n    <div className=\"list-wrapper\" style={style}>\r\n        <FullScreenBtnComponent onFullScreen={onFullScreen}/>\r\n        <h2>Cases by Country/ Region/ Sovereignity</h2>\r\n        <SearchPanelComponent \r\n          onSearch={onSearch}/>\r\n        <ul className=\"lists-wrapper\">\r\n            {countriesList}\r\n        </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListComponent;\r\n","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\GlobalCasesComponent.js",["206"],"import React, { useState } from 'react';\r\nimport './GlobalCasesComponent.css';\r\nimport GlobalCasesStatComponent from './GlobalCasesStatComponent/index';\r\n\r\n\r\nconst GlobalCasesComponent = ({global}) => {\r\n  return ( \r\n    <div className=\"global-cases-wrapper\">\r\n        <GlobalCasesStatComponent {...global }/>\r\n    </div>  \r\n  );\r\n};\r\n\r\nexport default GlobalCasesComponent;\r\n","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\ChartComponent\\ChartComponent.js",["207","208"],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\RightSideComponent\\TableComponent\\TableComponent.js",["209","210","211"],"import { fromArray } from '@amcharts/amcharts4/.internal/core/utils/Iterator';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { getHistoryStatCountry } from '../../../InitialStateComponent/index';\r\nimport './TableComponent.css';\r\nimport  FullScreenBtnComponent from '../../LeftSideComponent/ListComponent/FullScreenBtnComponent/index';\r\n\r\nconst TableComponent = ({stat, activeCountry, global, countries}) => {\r\n    let countriesList\r\n    const keys = Object.keys(global);\r\n    let data;\r\n  \r\n    if (activeCountry) {\r\n    [data] = countries.filter((el) => el.CountryCode === activeCountry);\r\n  } else {\r\n    data = global;\r\n  }\r\n\r\n  if (keys) {\r\n    countriesList = keys.map((elem, i) => {\r\n        return (\r\n            <li key={i} className=\"cases-wrapper\">\r\n            <span className=\"country-stat-wrapper\" style={{width: \"40%\"}}>{data[elem]} </span>\r\n            <span className=\"country-wrapper\"  style={{width: \"60%\"}}>{elem}</span>\r\n            </li>\r\n        );\r\n    })\r\n  }\r\n\r\n  const [fullScreen, setfullScreen] = useState(false);\r\n  function onFullScreen () {\r\n    setfullScreen(!fullScreen);\r\n    const body = document.getElementsByTagName('body');\r\n    if(body[0].style.overflow === \"hidden\") {\r\n      body[0].style.overflow = \"auto\";\r\n    } else {\r\n      body[0].style.overflow = \"hidden\";\r\n    } \r\n  };\r\n  const zIndex = 'zIndex';\r\n  const background = 'backgroundColor';\r\n  const style = {\r\n    position: fullScreen ? \"absolute\" : \"relative\",\r\n    top: fullScreen ? \"0\" : \"0\",\r\n    bottom: fullScreen ? \"0\" : \"0\",\r\n    left: fullScreen ? \"0\" : \"0\",\r\n    right: fullScreen ? \"0\" : \"0\",\r\n    width: fullScreen ? \"100%\" : \"100%\",\r\n    height: fullScreen ? \"120%\" : \"49%\",\r\n    [background]: fullScreen ? \"black\" : \"#222222\",\r\n    [zIndex]: fullScreen ? \"1000\" : \"0\",\r\n    marginBottom: fullScreen ? \"0\" : \"1%\",\r\n  };\r\n\r\n  return (\r\n    <div style={style} className=\"list-wrapper\" >\r\n        <h2>Country/global statistics</h2>\r\n        <FullScreenBtnComponent onFullScreen={onFullScreen}/>\r\n        <ul className=\"lists-wrapper\">\r\n            {countriesList}\r\n        </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableComponent;","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\GlobalCasesStatComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\GlobalCasesComponent\\GlobalCasesStatComponent\\GlobalCasesStatComponent.js",["212","213"],"import React, { useState, useEffect } from 'react';\r\nimport './GlobalCasesStatComponent.css';\r\n\r\nconst GlobalCasesStatComponent = ( global ) => {\r\n    const headers = Object.keys(global);\r\n    const newHeaders = headers.map((header) => {\r\n        return header.replace(/([a-z])([A-Z])/g, '$1 $2');\r\n    });\r\n    const stats = Object.values(global);\r\n    const [value, setValue] = useState(0)\r\n    const [index, setIndex] = useState(value);\r\n    const [currentHeader, setCurrentHeader] = useState(null);\r\n    const [currentStat, setCurrentStat] = useState(null);\r\n    \r\n\r\n    useEffect(() => {\r\n        setIndex(0);\r\n        setCurrentHeader(newHeaders[index]);\r\n        setCurrentStat(stats[index]);      \r\n    }, [global]);\r\n\r\n    useEffect(() => {\r\n        setIndex(value);\r\n        setCurrentHeader(newHeaders[value]);\r\n        setCurrentStat(stats[value])\r\n    }, [value])\r\n\r\n    function nextCase() {\r\n        const newValue = index < 11 ? index + 1 : 0;\r\n        setValue(newValue);\r\n    };\r\n\r\n    function prevCase() {\r\n        const newValue = index === 0 ? 11 : index - 1;\r\n        setValue(newValue);\r\n    };\r\n    \r\n    return (\r\n        <div className=\"global-case-wrapper\">\r\n            <h2>{ currentHeader }</h2>\r\n            <div className=\"stat-wrapper\">\r\n                <div onClick={ prevCase }>&#8249;</div>\r\n                <span>{ currentStat }</span>\r\n                <div onClick={ nextCase }>&#8250;</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GlobalCasesStatComponent;","C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\SearchPanelComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\SearchPanelComponent\\SearchPanelComponent.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\FullScreenBtnComponent\\index.js",[],"C:\\Users\\Diamond\\Desktop\\CovidDashboard\\covid-dashboard\\covid-dashboard\\src\\components\\MainComponent\\LeftSideComponent\\ListComponent\\FullScreenBtnComponent\\FullScreenBtnComponent.js",[],{"ruleId":"214","replacedBy":"215"},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":10,"column":12,"nodeType":"220","messageId":"221","endLine":10,"endColumn":17},{"ruleId":"218","severity":1,"message":"222","line":1,"column":8,"nodeType":"220","messageId":"221","endLine":1,"endColumn":13},{"ruleId":"223","severity":1,"message":"224","line":52,"column":39,"nodeType":"225","endLine":52,"endColumn":62},{"ruleId":"226","severity":1,"message":"227","line":160,"column":24,"nodeType":"228","messageId":"229","endLine":160,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":167,"column":22,"nodeType":"220","endLine":167,"endColumn":32},{"ruleId":"230","severity":1,"message":"232","line":169,"column":22,"nodeType":"233","endLine":169,"endColumn":58},{"ruleId":"218","severity":1,"message":"234","line":205,"column":5,"nodeType":"220","messageId":"221","endLine":205,"endColumn":19},{"ruleId":"218","severity":1,"message":"235","line":247,"column":14,"nodeType":"220","messageId":"221","endLine":247,"endColumn":29},{"ruleId":"230","severity":1,"message":"236","line":294,"column":6,"nodeType":"237","endLine":294,"endColumn":15,"suggestions":"238"},{"ruleId":"218","severity":1,"message":"222","line":1,"column":8,"nodeType":"220","messageId":"221","endLine":1,"endColumn":13},{"ruleId":"239","severity":1,"message":"240","line":47,"column":29,"nodeType":"233","messageId":"241","endLine":47,"endColumn":30,"fix":"242"},{"ruleId":"218","severity":1,"message":"243","line":84,"column":7,"nodeType":"220","messageId":"221","endLine":84,"endColumn":11},{"ruleId":"218","severity":1,"message":"244","line":1,"column":17,"nodeType":"220","messageId":"221","endLine":1,"endColumn":25},{"ruleId":"230","severity":1,"message":"245","line":12,"column":7,"nodeType":"246","endLine":12,"endColumn":16},{"ruleId":"230","severity":1,"message":"247","line":176,"column":6,"nodeType":"237","endLine":176,"endColumn":8,"suggestions":"248"},{"ruleId":"218","severity":1,"message":"249","line":1,"column":10,"nodeType":"220","messageId":"221","endLine":1,"endColumn":19},{"ruleId":"218","severity":1,"message":"250","line":2,"column":17,"nodeType":"220","messageId":"221","endLine":2,"endColumn":26},{"ruleId":"218","severity":1,"message":"251","line":3,"column":10,"nodeType":"220","messageId":"221","endLine":3,"endColumn":31},{"ruleId":"230","severity":1,"message":"252","line":20,"column":8,"nodeType":"237","endLine":20,"endColumn":16,"suggestions":"253"},{"ruleId":"230","severity":1,"message":"254","line":26,"column":8,"nodeType":"237","endLine":26,"endColumn":15,"suggestions":"255"},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Assignments to the 'currentPolygon' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","Assignments to the 'currentCountry' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","MemberExpression","'currentCountry' is assigned a value but never used.","'handleImageOver' is defined but never used.","React Hook useLayoutEffect has a missing dependency: 'stat'. Either include it or remove the dependency array.","ArrayExpression",["258"],"dot-location","Expected dot to be on same line as property.","expectedDotBeforeProperty",{"range":"259","text":"260"},"'prop' is assigned a value but never used.","'useState' is defined but never used.","The 'data' array makes the dependencies of useLayoutEffect Hook (at line 181) change on every render. To fix this, wrap the initialization of 'data' in its own useMemo() Hook.","VariableDeclarator","React Hook useLayoutEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["261"],"'fromArray' is defined but never used.","'useEffect' is defined but never used.","'getHistoryStatCountry' is defined but never used.","React Hook useEffect has missing dependencies: 'index', 'newHeaders', and 'stats'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCurrentHeader' needs the current value of 'index'.",["262"],"React Hook useEffect has missing dependencies: 'newHeaders' and 'stats'. Either include them or remove the dependency array.",["263"],"no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},[1785,1794],"\r\n      .",{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},"Update the dependencies array to be: [mapData, stat]",{"range":"272","text":"273"},"Update the dependencies array to be: [data]",{"range":"274","text":"275"},"Update the dependencies array to be: [global, index, newHeaders, stats]",{"range":"276","text":"277"},"Update the dependencies array to be: [newHeaders, stats, value]",{"range":"278","text":"279"},[9043,9052],"[mapData, stat]",[7651,7653],"[data]",[714,722],"[global, index, newHeaders, stats]",[868,875],"[newHeaders, stats, value]"]